name: Update Server and Restart Flask on PR Merge

on:
  push:
    branches:
      - 6-automate-workflow-to-update-vm-with-latest-github-build

jobs:
  if_merged:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out the repository
        uses: actions/checkout@v3
        continue-on-error: false  # If this fails, stop the workflow.


      # Step 2: Connect to Tailscale
      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.CLIENT_ID }}
          oauth-secret: ${{ secrets.CLIENT_SECRET }}
          tags: tag:server-backend
        continue-on-error: false  # If Tailscale connection fails, stop the workflow.

      # Step 3: Check Tailscale Status and add echo if Tailscale fails
      - name: Check Tailscale Status
        run: |
          if ! tailscale status; then
            echo "Tailscale connection failed. Please check the validity of the Tailscale auth key."
            exit 1  # Exit the workflow if Tailscale connection fails
          fi
        continue-on-error: false  # Stop if Tailscale status check fails.

      # Step 4: SSH into Server and Check for Updates
      - name: SSH into Server and Restart Flask
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SERVER_IP }}
          username: ${{ secrets.SERVER_USER }}
          password: ${{ secrets.SERVER_PASSWORD }}
          #key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            echo "Checking server's current branch..."
            cd ~/Documents/2024-2025_Senior_Project/server_backend || { echo "Failed to navigate to directory"; exit 1; }
            git status
            echo "Updating code from GitHub..."
            git fetch --all
            git reset --hard origin/main
            source venv/bin/activate || { echo "Failed to activate virtual environment"; exit 1; }
            # Step 4.1: Stop the Flask process running on port 5001
            echo "Stopping Flask process on port 5001..."
            FLASK_PID=$(lsof -t -i:5001)  # Find the PID of the process listening on port 5001

            if [ -z "$FLASK_PID" ]; then
              echo "No Flask process found on port 5001."
            else
              kill -9 $FLASK_PID  # Kill the process
              echo "Flask process on port 5001 has been stopped."
            fi
            echo "Starting Flask in the background..."
            nohup flask run --host=0.0.0.0 --port=5001 --debug > flask.log 2>&1 &
      # Step 5: Verify Flask is running
      - name: Verify Flask is running
        run: |
          curl http://<server-ip>:5001/health || echo "Flask did not start correctly."
